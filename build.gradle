plugins {
    id "java"
    id "signing"
    id "maven-publish"
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'de.gliderpilot.semantic-release' version "1.4.2"
}

group = "fr.cnieg.keycloak"

project.ext.ghToken = project.hasProperty('ghToken') ? project.getProperty('ghToken') : System.getenv('GH_TOKEN') ?: null

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

java {
    toolchain { languageVersion = JavaLanguageVersion.of(11) }
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.keycloak:keycloak-server-spi:16.0.0'
    compileOnly 'org.keycloak:keycloak-server-spi-private:16.0.0'
    compileOnly 'org.keycloak:keycloak-services:16.0.0'
}

test {
    useJUnitPlatform()
}

def hasSigningKey = project.hasProperty("signingKeyId") || project.hasProperty("signingKey")
if (hasSigningKey) {
    sign(project)
}

void sign(Project project) {
    project.signing {
        required { project.gradle.taskGraph.hasTask("publish") }
        def signingKeyId = project.findProperty("signingKeyId")
        def signingKey = project.findProperty("signingKey")
        def signingPassword = project.findProperty("signingPassword")
        if (signingKeyId) {
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        sign publishing.publications.maven
    }
}

project.plugins.withType(MavenPublishPlugin).all {
    PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
    publishing.publications.withType(MavenPublication).all { mavenPublication ->
        mavenPublication.pom {
            name = "${project.group}:${project.name}"
            description = name
            url = "https://github.com/cnieg/${project.name}"
            licenses {
                license {
                    name = "The Apache License, Version 2.0"
                    url = "https://www.apache.org/licenses/LICENSE-2.0"
                }
            }
            developers {
                developer {
                    id = "maintainers"
                    name = "CNIEG"
                    email = "maintainers@cnieg.fr"
                }
            }
            scm {
                connection = "scm:git:https://github.com/cnieg/${project.name}"
                developerConnection = "scm:git:ssh://github.com/cnieg/${project.name}.git"
                url = "https://github.com/cnieg/${project.name}"
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype{
            username=project.findProperty('sonatypeUsername')
            password=project.findProperty('sonatypePassword')
        }
    }
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

semanticRelease {
    repo {
        ghToken = project.ghToken
        releaseAsset jar
        releaseAsset sourcesJar
        releaseAsset javadocJar
    }
}

publishing {
    repositories {
        maven {
            name = "local"
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.toString().endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}
